{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def BreadthFirst (OriginalArray, k):\n",
    "    queue =  []\n",
    "    for i in range(k):\n",
    "        queue.append(OriginalArray[i])\n",
    "\n",
    "    tempArr = []\n",
    "    currentSize = 0\n",
    "    sorted = True\n",
    "    \n",
    "    while queue or sorted==False:\n",
    "        if(sorted == True):\n",
    "            tempArr.append(queue.pop())\n",
    "            currentSize += 1\n",
    "        sorted = True\n",
    "        for i in range(currentSize-1):\n",
    "            if (tempArr[i] > tempArr[i+1]):\n",
    "                temp = tempArr[i]\n",
    "                tempArr[i] = tempArr[i+1]\n",
    "                tempArr[i+1] = temp\n",
    "                sorted = False\n",
    "    return tempArr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def DepthFirst (OriginalArray, k):\n",
    "    stack =  []\n",
    "    for i in range(k):\n",
    "        stack.append(OriginalArray[i])\n",
    "\n",
    "    tempArr = []\n",
    "    currentSize = 0\n",
    "    sorted = True\n",
    "    \n",
    "    while stack or sorted==False:\n",
    "        if(sorted == True):\n",
    "            tempArr.append(stack.pop())\n",
    "            currentSize += 1\n",
    "        sorted = True\n",
    "        for i in range(currentSize-1):\n",
    "            if (tempArr[i] > tempArr[i+1]):\n",
    "                temp = tempArr[i]\n",
    "                tempArr[i] = tempArr[i+1]\n",
    "                tempArr[i+1] = temp\n",
    "                sorted = False\n",
    "    return tempArr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "BFS method result: [10, 20, 30, 40]\n",
      "DFS method result: [10, 20, 30, 40]\n",
      "Bubble Sort method result: [10, 20, 30, 40]\n",
      "\n",
      "BFS time results: 0.0764735999982804\n",
      "DFS time results: 0.07408040002337657\n",
      "Bubble Sort time results: 0.020939000009093434\n"
     ]
    }
   ],
   "source": [
    "# importing Library\n",
    "from sorting_techniques import pysort\n",
    "import timeit\n",
    "\n",
    "# Creating the Sort Object\n",
    "sortObj = pysort.Sorting()\n",
    "\n",
    "OriginalArray = [10, 20, 40, 30]\n",
    "k = 4\n",
    "\n",
    "print(\"BFS method result:\", BreadthFirst(OriginalArray, k))\n",
    "print(\"DFS method result:\", DepthFirst(OriginalArray, k))\n",
    "print(\"Bubble Sort method result:\", sortObj.bubbleSort(OriginalArray))\n",
    "\n",
    "print(\"\")\n",
    "\n",
    "print(\"BFS time results:\", timeit.timeit(lambda: BreadthFirst(OriginalArray, k), number=10000))\n",
    "print(\"DFS time results:\", timeit.timeit(lambda: BreadthFirst(OriginalArray, k), number=10000))\n",
    "print(\"Bubble Sort time results:\", timeit.timeit(lambda: sortObj.bubbleSort(OriginalArray), number=10000))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
